version: 2
jobs:
    build-job:
      docker:
        - image: circleci/openjdk:8-jdk
    
      working_directory: ~/repo  

      environment:
        # Customize the JVM maximum heap limit
        MAVEN_OPTS: -Xmx3200m


      steps:
        - checkout
        
        - restore_cache:
            keys:
              - eclipse-platform-{{ checksum "org.eclipse.epsilon.labs.updatesite.interim/site.xml" }}
              - eclipse-platform-

        # Download Eclipse platform, this will be cached
        - run:
              command: |
                curl -O http://ftp.jaist.ac.jp/pub/eclipse/technology/epp/downloads/release/oxygen/R/eclipse-java-oxygen-R-linux-gtk-x86_64.tar.gz
                tar -zxvf eclipse-java-oxygen-R-linux-gtk*.tar.gz
        
        # EMC-JDBC
        - run:     
            # curl the artifacts list from the build
            # wget each of the files (jars)
            # use java to create local p2 site
            command: |
              curl "https://circleci.com/api/v1.1/project/github/epsilonlabs/emc-jdbc/latest/artifacts?circle-token=$DOWNLOAD_TOKEN" | grep -o 'https://[^"]*' > artifacts.txt
              <artifacts.txt xargs -P4 -I % wget -x -nH --cut-dirs=1 % -P ./epsilonlabs-artifacts/jdbc/
              java -jar ./eclipse/plugins/org.eclipse.equinox.launcher_*.jar \
                -application org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher \
                -metadataRepository file:$(pwd)/repository/jdbc \
                -artifactRepository file:$(pwd)/repository/jdbc \
                -source ./epsilonlabs-artifacts/jdbc/ \
                -configs gtk.linux.x86 \
                -compress \
                -publishArtifacts

        # EMC-PTCIM
        #- run:     
        #    # curl the artifact list from the build
        #    # wget each of the files
        #    # java to create local p2 site
        #    command: |
        #      curl https://circleci.com/api/v1.1/project/github/epsilonlabs/emc-jdbc/latest/artifacts$$DOWNLOAD_TOKEN | grep -o 'https://[^"]*' > artifacts.txt
        #      <artifacts.txt xargs -P4 -I % wget -x -nH --cut-dirs=1 %$$DOWNLOAD_TOKEN -P -P ./epsilonlabs-artifacts/jdbc/
        #      java -jar ./eclipse/plugins/org.eclipse.equinox.launcher_*.jar \
        #        -application org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher \
        #        -metadataRepository file:$(pwd)/repository/jdbc \
        #        -artifactRepository file:$(pwd)/repository/jdbc \
        #        -source ./epsilonlabs-artifacts/jdbc/ \
        #        -configs gtk.linux.x86 \
        #        -compress \
        #        -publishArtifacts


        # Crate interim updatesite site.xml dynamically
        - run: 
            command: |
              find ./epsilonlabs-artifacts -type f -name "site.xml" | xargs -I % cat % > site.xml
              echo -e "\nFIND"
              cat site.xml
              grep -vE "<site>|</site>|<?xml" site.xml > tmp.xml
              echo -e "\nGREP"
              cat tmp.xml
              echo "</site>" >> tmp.xml
              rm site.xml
              echo "<?xml version="1.0" encoding="UTF-8"?>" >> site.xml
              echo "<site>" >> site.xml
              echo -e "\nSTART"
              cat tmp.xml
              echo -e "\nINSERT"
              cat tmp.xml >> site.xml
              echo -e "\nCOMPLETE"
              cat site.xml
              rm tmp.xml
              mv site.xml org.eclipse.epsilon.labs.updatesite.interim/site.xml

        - run: mvn clean package

        - save_cache:
            key: eclipse-platform-{{ checksum "org.eclipse.epsilon.labs.updatesite.interim/site.xml" }}
            paths:
              - eclipse

    deploy-job:
      docker:
        - image: my-image
      
      working_directory: ~/repo  
      
      steps:
        - run: sh ./pushToBintray.sh arcanefoam $BINTRAY_API_KEY epsilonlabsdemo EpsilonLabs-Updatesite epsilonlabs-updatesite 1.3 org.eclipse.epsilon.labs.updatesite.interim/target/site

workflows:
  version: 2
  build-deploy:
    jobs:
      - build-job
      - deploy-job:
          requires:
            - build-job
          filters:
            branches:
              only: master
            



